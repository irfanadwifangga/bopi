generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @db.VarChar(25)
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role     @default(CUSTOMER)
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("users")
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id          String    @id @default(cuid()) @db.VarChar(25)
  name        String    @db.VarChar(150)
  description String    @db.Text
  image       String    @db.Text
  variants    Variant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("products")
}

model Variant {
  id         String      @id @default(cuid()) @db.VarChar(25)
  product    Product     @relation(fields: [productId], references: [id])
  productId  String      @db.VarChar(25)
  name       String      @db.VarChar(50) // "Kecil", "Sedang", "Besar"
  price      Float
  stock      Int
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([productId])
  @@map("variants")
}

model Order {
  id        String      @id @default(cuid()) @db.VarChar(25)
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.VarChar(25)
  status    OrderStatus @default(PENDING)
  total     Float
  items     OrderItem[]
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  COMPLETED
}

model OrderItem {
  id        String  @id @default(cuid()) @db.VarChar(25)
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.VarChar(25)
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @db.VarChar(25)
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([variantId])
  @@map("order_items")
}

model Payment {
  id        String        @id @default(cuid()) @db.VarChar(25)
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String        @unique @db.VarChar(25)
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@index([status])
  @@map("payments")
}

enum PaymentMethod {
  CASH
  TRANSFER
  EWALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Review {
  id        String   @id @default(cuid()) @db.VarChar(25)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.VarChar(25)
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String   @db.VarChar(25)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([variantId])
  @@map("reviews")
}

model Cart {
  id        String     @id @default(cuid()) @db.VarChar(25)
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique @db.VarChar(25)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid()) @db.VarChar(25)
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.VarChar(25)
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String   @db.VarChar(25)
  quantity  Int
  createdAt DateTime @default(now())

  @@index([cartId])
  @@index([variantId])
  @@map("cart_items")
}
